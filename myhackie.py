# -*- coding: utf-8 -*-
"""myhackie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Ju6ySxBWCxzEu3VDSBZHGUjCuf2XzWn
"""

# Install all packages
import numpy as np
import pandas as pd
import io
from sklearn import linear_model
from google.colab import files
from datetime import date
from geopy import Nominatim

# Import model data
uploaded = files.upload()
dat = pd.read_csv(io.BytesIO(uploaded['predictivedat.csv']))

# Fit model
x = dat[['lat', 'long', 'apr_temp', 'may_temp', 'june_temp', 'july_temp',  'aug_temp',
        'apr_rain', 'may_rain', 'june_rain', 'july_rain', 'aug_rain']]
y = dat['date_fire']
lm = linear_model.LinearRegression()
WFW_model = lm.fit(x, y)

# First ask if location is in BC
prov = input("What province? ")
if prov in ('bc', 'BC', 'british columbia', 'British Columbia'):
  print("Great! We can help you predict when wildfires will happen in British Columbia.")
  city = input("Which city or region? ")
else:
  print("Sorry, that province is not support at this time. Check back soon!")

# Next, get longitude and latitude of inputted region
geolocator = Nominatim(user_agent="my_user_agent")
loc = geolocator.geocode(city)
lati = loc.longitude
longi = loc.latitude
# lati = -120.158693
# longi = 50.681417

# Kelowna example for pitch: 50.681417, -120.158693
temp4 = 16
temp5 = 20
temp6 = 27
temp7 = 31
temp8 = 32
rain4 = 3
rain5 = 1
rain6 = 2
rain7 = 3
rain8 = 3

# combine user input value variables into data frame
user_dat = pd.DataFrame(np.array([[lati, longi, temp4, temp5, temp6, temp7, temp8,
                                   rain4, rain5, rain6, rain7, rain8]]),
                   columns=['lat', 'long', 'apr_temp', 'may_temp', 'june_temp', 'july_temp', 'aug_temp', 
                            'apr_rain', 'may_rain', 'june_rain', 'july_rain', 'aug_rain'])

predicted_val = WFW_model.predict(user_dat)
predicted_val = predicted_val[0]

# require date information from user

newyearsday = date(2023, 1, 1)

# Only if you want to input your own date:
# current_date = date(2023, 7, 13) 
current_days = current_date - newyearsday
current_days = current_days.days

# grabbing actual date
current_date = date.today()
current_days = current_date - newyearsday
current_days = current_days.days

# set up date comparisons
diff_days = round(abs(predicted_val - current_days), 0)

print("There are " + str(diff_days) + " days between the predicted day of the wildfire and your current date.")
if diff_days < 5:
  print("WARNING: There may be a wildfire very soon.")
elif diff_days >= 5 and diff_days < 15:
  print("HIGH RISK: There may be a wildfire within a week or 2.")
elif diff_days >=15 and diff_days < 30:
  print("MEDIUM RISK: There may be a wildfire within a month's time.") 
else:
  print("LOW RISK: There is minimal risk of wildfire.")